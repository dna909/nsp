+++ HMI/US/portrait/diff-eu-version.txt	2022-08-17 15:05:04.589658760 +0000
+--- HMI/n2t-out/Program.s.txt	2022-08-17 15:05:03.933958595 +0000
++++ HMI/US/portrait/n2t-out/Program.s.txt	2022-08-17 15:05:04.569667901 +0000
+@@ -14,6 +14,6 @@
+     //color vars
+     int defaultFontColor=65535
+     int defaultBcoColor=6371
+--- HMI/n2t-out/cardEntities.txt	2022-08-17 15:05:03.937956767 +0000
++++ HMI/US/portrait/n2t-out/cardEntities.txt	2022-08-17 15:05:04.573666073 +0000
+@@ -65,6 +65,16 @@
+             vis bPrev,0
+             vis bNext,0
+             cardEntities.bco=defaultBcoColor
+             for(sys0=0;sys0<65;sys0++)
+             {
+@@ -140,6 +150,18 @@
+@@ -176,6 +198,15 @@
+@@ -306,6 +337,26 @@
+@@ -425,6 +476,34 @@
+@@ -882,6 +961,106 @@
+@@ -990,6 +1169,33 @@
+@@ -1111,6 +1317,32 @@
+                 page popupFan
+@@ -1830,6 +2062,155 @@
++                                            vis bUp5,0
++                                            vis bStop5,0
++                                            vis bDown5,0
++                                            vis btOnOff5,1
++                                            vis bText5,0
++                                            vis hSlider5,0
++                                            vis nNum5,0
++                                            // get Button State (optional Value)
++                                            spstr strCommand.txt,tTmp.txt,"~",32
++                                            covx tTmp.txt,sys0,0,0
++                                            btOnOff5.val=sys0
+--- HMI/n2t-out/pageStartup.txt	2022-08-17 15:05:03.933958595 +0000
++++ HMI/US/portrait/n2t-out/pageStartup.txt	2022-08-17 15:05:04.573666073 +0000
+diff -bur HMI/n2t-out/pageTest.txt HMI/US/portrait/n2t-out/pageTest.txt
+--- HMI/n2t-out/pageTest.txt	2022-08-17 15:05:03.933958595 +0000
++++ HMI/US/portrait/n2t-out/pageTest.txt	2022-08-17 15:05:04.569667901 +0000
+@@ -13,36 +13,6 @@
+     Events
+         Preinitialize Event
+             vis p0,0
+-            recmod=1
+-            bauds=115200
+-        
+-Variable (string) tInstruction
+-    Attributes
+-        Scope         : local
+-        Text          : 
+-        Max. Text Size: 30
+-    
+-Variable (string) strCommand
+-    Attributes
+-        Scope         : local
+-        Text          : 
+-        Max. Text Size: 20
+-    
+-Variable (string) tSend
+-    Attributes
+-        Scope         : local
+-        Text          : 
+-        Max. Text Size: 40
+-    
+-Text tBench
+-    Attributes
+-        Scope                               : local
+-        Dragging                            : 0
+-        Disable release event after dragging: 0
+-        Send Component ID                   : disabled
+-        Associated Keyboard                 : none
+-        Text                                : 
+-        Max. Text Size                      : 20
+     
+ Picture p0
+     Attributes
+@@ -220,82 +190,3 @@
+         Touch Press Event
+             page cardQR
+         
+-Timer tmSerial
+-    Attributes
+-        Scope      : local
+-        Period (ms): 50
+-        Enabled    : yes
+-    
+-    Events
+-        Timer Event
+-            // data available
+-            if(usize>1)
+-            {
+-                bufferPos=0
+-                while(bufferPos<usize)
+-                {
+-                    // check for 0x55 0xBB - Command Init Secuence
+-                    if(u[bufferPos]==187&&u[bufferPos-1]==85)
+-                    {
+-                        //remove garbage at the start of the buffer if there's any to free buffer for command
+-                        if(u[bufferPos]!=1)
+-                        {
+-                            udelete bufferPos-1
+-                        }
+-                        //instruction is now aligned with buffer, because we deleted garbage before instrcution
+-                        //get length after init sequence (check if there are more than to bytes in buffer)
+-                        if(3<usize)
+-                        {
+-                            // check if serial buffer has reached the announced length
+-                            ucopy payloadLength,2,2,0
+-                            // we are only checking payload length so we have to skip first 3 bytes (init+payload length) (-1 because of < instead of <=)
+-                            payloadLength+=3
+-                            // payload length does also not contain crc, so we are adding another 2 bytes for crc
+-                            payloadLength+=2
+-                            if(payloadLength<usize)
+-                            {
+-                                // calculate crc
+-                                crcrest 1,0xFFFF
+-                                // u[2] contains payload legth at 3rd pos in buffer, we are calculating crc from 3rd pos with number of bytes from payload length
+-                                //crcputu 3,u[2]
+-                                // u[2] cotnains payload length, we are calculating a crc over the whole message, so we have to add 3 to the length from u[2]
+-                                crcputu 0,payloadLength-1
+-                                // get recived crc to be able to compare it
+-                                ucopy recvCrc,payloadLength-1,2,0
+-                                // compare crc with recived value
+-                                if(crcval==recvCrc)
+-                                {
+-                                    // crc is okay
+-                                    // here is the location where acual code should be
+-                                    // write command to variable strCommand
+-                                    ucopy strCommand.txt,4,payloadLength-5,0
+-                                    // write instruction to tInstuction (debug output, but used as variable here, ui elements will be disabled by default)
+-                                    spstr strCommand.txt,tInstruction.txt,"~",0
+-                                    if(tInstruction.txt=="ping")
+-                                    {
+-                                        spstr strCommand.txt,tBench.txt,"~",1
+-                                        tSend.txt="pong,"+tBench.txt
+-                                        //send calc crc
+-                                        btlen tSend.txt,sys0
+-                                        crcrest 1,0xffff // reset CRC
+-                                        crcputh 55 bb
+-                                        crcputs sys0,2
+-                                        crcputs tSend.txt,0
+-                                        //send cmd
+-                                        printh 55 bb
+-                                        prints sys0,2
+-                                        prints tSend.txt,0
+-                                        prints crcval,2
+-                                    }
+-                                    // end of user code
+-                                    udelete payloadLength-1
+-                                    bufferPos=0
+-                                }
+-                            }
+-                        }
+-                    }
+-                    // next character
+-                    bufferPos++
+-                }
+-            }
+-        
